\documentclass{article}

\usepackage{listings}
\usepackage{hyperref}

\title{Machine Learning Writeup, Data Science Specialization}
\author{Charles Carter\thanks{cccarter@troy.edu}}
\date{November 17, 2014}

\begin{document}

\maketitle{}
\tableofcontents{}

\section{Introduction}

This paper is the writeup of the course project in Practical Machine Learning, which is part of the Data Science specialization offered by Johns Hopkins University through Cousera. The project requires the predictive analysis of a data set, and the evaluation of various models. This paper consists of an (1) Introduction, the (2) Instructions for completing the project, a description of the (3) User Defined Functions called by the main logic of the script, the (4) Logic of the script, and the (5) Results and Conclusions.

\section{Instructions}

\subsection{Background}

Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: \url{http://groupware.les.inf.puc-rio.br/har} (see the section on the Weight Lifting Exercise Dataset). 

\subsection{Data}

The training data for this project are available here: \url{https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv}

The test data are available here: \url{https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv}

The data for this project come from this source: \url{http://groupware.les.inf.puc-rio.br/har}. If you use the document you create for this class for any purpose please cite them as they have been very generous in allowing their data to be used for this kind of assignment. 

\subsection{What you should submit}

The goal of your project is to predict the manner in which they did the exercise. This is the "classe" variable in the training set. You may use any of the other variables to predict with. You should create a report describing how you built your model, how you used cross validation, what you think the expected out of sample error is, and why you made the choices you did. You will also use your prediction model to predict 20 different test cases. 

1. Your submission should consist of a link to a Github repo with your R markdown and compiled HTML file\footnote{I have not submitted MarkDown or HTML files, but Rnw and PDF files. The reason is that I almost never use HTML output in my job, but frequently generate PDF files, so I wanted to focus on the production of output in PDF format.} describing your analysis. Please constrain the text of the writeup to less than 2000 words and the number of figures to be less than 5. It will make it easier for the graders if you submit a repo with a gh-pages branch so the HTML page can be viewed online (and you always want to make it easy on graders.)

2. You should also apply your machine learning algorithm to the 20 test cases available in the test data above. Please submit your predictions in appropriate format to the programming assignment for automated grading. See the programming assignment for additional details. 

\subsection{Reproducibility}

Due to security concerns with the exchange of R code, your code will not be run during the evaluation by your classmates. Please be sure that if they download the repo, they will be able to view the compiled HTML version of your analysis. 

\section{User Defined Functions}

\subsection{Loading Packages}

My analysis uses a number of helper functions. This sections details these functions. The first order of business is to load the required packages. We need \texttt{caret} to perform the prediction and training, \texttt{knitr} to prepare the PDF, and \texttt{ggplot2} for visualization.

<<load-packages, eval=TRUE, dev='png', fig.width = 4, fig.height = 4>>=
load.libraries <- function()
{
    library(caret)
    library(knitr)
    library(ggplot2)
    library(randomForest)
}
@

\subsection{Loading Data Files}

Next, we load and clean the data. Function \texttt{load.data()} assumes that the data file is in the current directory. This function loads the data into the R environment.

<<load.data, eval=TRUE, dev='png', fig.width = 4, fig.height = 4>>=
load.data <- function(filename)
{
    file <- read.csv(filename, stringsAsFactors = TRUE, na.strings=c("NA", ""))
    cat(filename, " set loaded, returns\n")
    return(file)
}
@

\subsection{Delete Empty Columns}

The data files contain many variables with no values, or very sparse values. The function \texttt{delete.empty.cols.1} reduces the datasets, both training and testing, by deleting those variables. The numeral \textit{1} appended to the end of the function results from previous, exploratory versions.

<<selete.empty.cols, eval=TRUE, dev='png', fig.width = 4, fig.height = 4>>=
delete.empty.cols.1 <- function(df)
{
    x <- df[ , apply(df, 2, function(x) 
        (sum(grepl("[A-Za-z0-9]", x, perl = TRUE)) / length(x)) > 0.5)]
    delete <- grep("X|timestamp|window", names(df), perl = TRUE)
    x <- x[ , -delete]
    print(" set cleaned and prepared, returns\n")
    return(x)
}
@

\section{Logic}

\subsection{Calling Helper Functions}

After creating the helper functions, I call them with the following listing. \texttt{train} consists of the original, raw data. \texttt{trainA} consists of the data after cleaning. This results in a model fit for the testing

<<program-logic, eval=TRUE, dev='png', cache = TRUE>>=
##this is the program logic
print("loading libraries\n")
load.libraries()
print("calling train <- load.data.training('pml-training.csv')\n")
train <- load.data('pml-training.csv')

print("calling delete.empty.cols.1(), returns trainA\n")
trainA <- delete.empty.cols.1(train)

print("creating training and testing sets, returns 'training' and'testing'")
inTrain <- createDataPartition(y = trainA$classe, p = 0.7, list = FALSE)
training <- trainA[inTrain, ]
testing <- trainA[-inTrain, ]
cat("Dimensions of training data are: ", dim(training), "\n and dimensions of the testing data are: ", dim(testing), ".\n")

cat("setting seed and calling train() with GLM\n")
set.seed(141017)
suppressWarnings( modelFit <- train(classe~ ., data = training, method = "glm") )
prediction <- predict(modelFit, newdata = testing)
@

\subsection{Validation of Results}

We validate the results of our prediction by using the test data as the input for \texttt{predict()}, and then constructing a confusion matrix with the actual outcomes in the test data and the predicted results. The accuracy of this exercise is 99.5 percent. As shown below, both the positive predictive values and the negative predictive values are 99 percent.

<<validation, eval=TRUE, cache = TRUE>>=
prediction <- predict(modelFit, newdata = testing)
cm <- confusionMatrix(prediction, testing$classe)
cm
@

\subsection{Prediction}

Finally, we run a prediction on the testing data set and observe the results. \texttt{predictions} contains the predictions of the testing set from the model trained in the training set. \texttt{result} contains the numerical results of the predictions. We then plot the results, as contained in the testing set, with the predictions, as shown in the plot below.

<<data-sets, eval=TRUE, cache = TRUE>>=
print("calling test <- load.data.training('pml-testing.csv')\n")
test <- load.data('pml-testing.csv')

print("calling delete.empty.cols.1(), returns testA\n")
testA <- delete.empty.cols.1(test)

outcome.predictions <- predict(modelFit, newdata = outcome1)
outcome.predictions
@

\subsection{Cross Validation and Out of Sample Error}

The initial exploratory work was done with the training and testing sets as indicated above. The run time of this code takes approximate 72 seconds on my machine. In order to determine whether the first results I obtained were reasonable, I altered the seed and ran the code ten times (with different seeds). The results did not vary with the example shown above. Therefore, I have omitted these graphs and the code I used.


I also experimented with methods other than \texttt{glm}. The function \texttt{names(getModelInfo())} lists 169 different methods available with the \texttt{train()} function. Other than \texttt{glm}, I ran the same code with the methods listed below. Some of the methods ran an inordinately long time --- Random Forests ran for about six hours. The plotted results (which was all I checked) were all very similar, so I am comfortable that \texttt{glm} works reasonably well as a predictor. I have omitted the R code, the results, and the plots in the interest of not overtaxing the reader. If the reader chooses, he can substitute the lines of code below appropriately and obtain the same results.

\lstset{language=R,numbers=left,keepspaces=false,basicstyle=\footnotesize,numberstyle=\tiny,breaklines=true,showstringspaces=false}
\begin{lstlisting}
modelFit <- train(classeNum ~ ., data = training, method = "bag")
modelFit <- train(classeNum ~ ., data = training, method = "cforest")
modelFit <- train(classeNum ~ ., data = training, method = "lda")
modelFit <- train(classeNum ~ ., data = training, method = "dnn")
modelFit <- train(classeNum ~ ., data = training, method = "logreg")
modelFit <- train(classeNum ~ ., data = training, method = "svmLinear")
\end{lstlisting}

Based on the foregoing, I conclude that the minimum out of sample error is 1 in 4904 records, or approximately 0.02 percent. 

\section{Results and Conclusion}

Using package \texttt{caret} enabled a fairly quick and easy way to test various prediction algorithms. Method \texttt{glm} precisely predicted the outcomes of the testing data from the training data. 

Finally, as conclusive proof of the validity of the results, I uploaded the predictions in Part 2 of the assignment, the 20 test cases contained in the \texttt{pml-testing.csv} file, and each of the predictions for the observations were correct.

\end{document}
